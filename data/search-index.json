[
{
  "id": "bash",
  "title": "Bash",
  "url": "/bash",
  "category": "Ubuntu",
  "keywords": null,
  "content_html": "<h3 id=\"bashでの文字エスケープ\">Bashでの文字エスケープ</h3>\n\n<p>Bashでの文字エスケープは<strong>シングルクオートが基本</strong></p>\n\n<ul>\n  <li>以下が問題なく使える\n    <ul>\n      <li>ダブルクオーテーション””</li>\n      <li>空白</li>\n      <li>変数</li>\n    </ul>\n  </li>\n  <li>工夫が必要なもの\n    <ul>\n      <li>シングルクオート’’\n        <ul>\n          <li>ダブルクオートで囲むと良い\n            <ul>\n              <li>「’」→「”’“」</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p>参考：<a href=\"https://qiita.com/kawaz/items/f8d68f11d31aa3ea3d1c\">https://qiita.com/kawaz/items/f8d68f11d31aa3ea3d1c</a></p>",
  "intro_html": "<p>Bash</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "colcon",
  "title": "colcon",
  "url": "/colcon",
  "category": "ROS",
  "keywords": null,
  "content_html": "<h3 id=\"colconのよく使うサブコマンド\">colconのよく使うサブコマンド</h3>\n\n<table class=\"-shortcuts\">\n  <thead>\n    <tr>\n      <th>サブコマンド</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>build</code></td>\n      <td>ビルドする</td>\n    </tr>\n    <tr>\n      <td><code>test</code></td>\n      <td>テストを回す</td>\n    </tr>\n    <tr>\n      <td><code>test-result</code></td>\n      <td>テスト結果を表示</td>\n    </tr>\n    <tr>\n      <td><code>graph</code></td>\n      <td>パッケージ間の依存関係グラフを表示</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"colcon-buildのよく使うオプション\">colcon buildのよく使うオプション</h3>\n\n<table class=\"-shortcuts\">\n  <thead>\n    <tr>\n      <th>オプション</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>--symlink-install</code></td>\n      <td>ファイルのインストールをコピーではなくシンボリックで行う</td>\n    </tr>\n    <tr>\n      <td><code>--packages-select &lt;package&gt;</code></td>\n      <td>指定したパッケージのみビルド</td>\n    </tr>\n    <tr>\n      <td><code>--packages-up-to &lt;package&gt;</code></td>\n      <td>指定したパッケージとその依存パッケージをビルド</td>\n    </tr>\n    <tr>\n      <td><code>--cmake-args &lt;CMakeに渡す引数&gt;</code></td>\n      <td>CMakeに渡す引数を指定する</td>\n    </tr>\n    <tr>\n      <td><code>--parallel-workers &lt;number&gt;</code></td>\n      <td>最大の並列数を指定する</td>\n    </tr>\n    <tr>\n      <td><code>--cmake-clean-first</code></td>\n      <td>クリーンビルドする</td>\n    </tr>\n  </tbody>\n</table>",
  "intro_html": "<p>colcon</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "cpp-build-time-reduction",
  "title": "C++ ビルド時間 短縮",
  "url": "/cpp-build-time-reduction",
  "category": "C++",
  "keywords": null,
  "content_html": "<h3 id=\"並列ビルド\">並列ビルド</h3>\n\n<p><code>make</code> なら<code>-j&lt;N&gt;</code>オプションをつけるとNスレッドでビルドしてくれる<br />\n直接<code>make</code>をたたけない場合でも<code>export MAKEFLAGS=\"-j&lt;N&gt;\"</code>で環境変数に設定することでバックエンドの<code>make</code>に指示できる<br />\n<code>ninja</code>の場合は<code>export NINJAJOBS=&lt;N&gt;</code>で指示できる</p>\n\n<h3 id=\"バックエンドをninjaにする\">バックエンドを<code>ninja</code>にする</h3>\n\n<p><code>make</code>よりかなり早いらしい</p>\n\n<p><code>cmake</code>なら<code>-G ninja</code>オプションをつけるとバックエンドを<code>ninja</code>にすることができる</p>\n\n<h3 id=\"リンカーにmoldを使う\">リンカーにmoldを使う</h3>\n\n<p>結構早いらしい</p>\n\n<h3 id=\"ccacheを使う\">ccacheを使う</h3>\n\n<p>2回目以降をキャッシュを有効活用して爆速にしてくれる</p>\n\n<h3 id=\"ヘッダー記述量を減らす\">ヘッダー記述量を減らす</h3>\n\n<p>ヘッダーはインクルードしているソースファイルすべてに展開されるため、実装をソースファイルに移動するだけでかなりのビルド時間削減が期待できる<br />\npimplイディオムなども使える</p>\n\n<h3 id=\"インクルードを減らす\">インクルードを減らす</h3>\n\n<p>「インクルードする=ビルドするソースコード量の増大」なので避けたい<br />\n具体的なクラスの実装が必要ない場合はインクルードせずに前方宣言だけで済ませたりできる</p>",
  "intro_html": "<p>C++ ビルド時間 短縮</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-08-19"
},{
  "id": "cpp-idioms",
  "title": "C++ Idioms",
  "url": "/cpp-idioms",
  "category": "C++",
  "keywords": null,
  "content_html": "<h3 id=\"crtp\">CRTP</h3>\n<p><a href=\"https://ja.wikibooks.org/wiki/More_C++_Idioms/%E5%A5%87%E5%A6%99%E3%81%AB%E5%86%8D%E5%B8%B0%E3%81%97%E3%81%9F%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3(Curiously_Recurring_Template_Pattern)\">More C++ Idioms</a></p>\n\n<h3 id=\"nifty-counter\">Nifty Counter</h3>\n\n<p><a href=\"https://ja.wikibooks.org/wiki/More_C++_Idioms/%E5%B0%8F%E7%B2%8B%E3%81%AA%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF(Nifty_Counter)\">More C++ Idioms</a></p>\n\n<h3 id=\"construct-on-first-use\">Construct On First Use</h3>\n\n<p><a href=\"https://ja.wikibooks.org/wiki/More_C++_Idioms/%E5%88%9D%E5%9B%9E%E4%BD%BF%E7%94%A8%E6%99%82%E7%94%9F%E6%88%90(Construct_On_First_Use)\">More C++ Idioms</a></p>\n\n<h3 id=\"capability-query\">Capability Query</h3>\n\n<p><a href=\"https://ja.wikibooks.org/wiki/More_C++_Idioms/%E8%83%BD%E5%8A%9B%E7%85%A7%E4%BC%9A(Capability_Query)\">More C++ Idioms</a></p>\n\n<h3 id=\"type-erasure\">Type Erasure</h3>\n\n<p><a href=\"https://en.wikibooks.org/wiki/More_C++_Idioms/Type_Erasure\">More C++ Idioms(English version)</a></p>",
  "intro_html": "<p>C++ Idioms</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "cpp-reference-diary",
  "title": "cppreference.com 日記",
  "url": "/cpp-reference-diary",
  "category": "C++",
  "keywords": null,
  "content_html": "<h3 id=\"関数tryブロック\"><a href=\"https://ja.cppreference.com/w/cpp/language/function-try-block\">関数Tryブロック</a></h3>\n\n<p>以下のようなコードがかけちゃうらしい．<br />\nマジか，tryそんなとこに書けたんか</p>\n\n<pre><code class=\"language-cpp\">int main() try {}\ncatch (...){}\n</code></pre>\n\n<h3 id=\"main関数\"><a href=\"https://ja.cppreference.com/w/cpp/language/main_function\">main関数</a></h3>\n\n<p>いわゆるエントリポイント，<code>main</code>関数</p>\n\n<ul>\n  <li><code>main</code>関数は<code>int</code>型だが，return文はなくてもOK</li>\n  <li><code>auto main()</code>という書き方はダメらしい</li>\n  <li><code>return N</code>は<code>std::exit(N)</code>と同じ意味を持つ</li>\n  <li><code>main</code>関数が関数<code>try</code>ブロックになっていてもmain関数の外で定義された（しかし，<code>main</code>関数の終了と同時に破棄される）静的オブジェクトのデストラクタで投げられた例外はキャッチできない</li>\n</ul>\n\n<h3 id=\"stdmin_element-stdmax_element\"><a href=\"https://ja.cppreference.com/w/cpp/algorithm/min_element\">std::min_element</a>, <a href=\"https://ja.cppreference.com/w/cpp/algorithm/max_element\">std::max_element</a></h3>\n\n<ul>\n  <li>最低限，探索範囲を[first, last)で指定できる．</li>\n  <li>比較には<code>&lt;</code>演算子を使用（<code>max_element</code>は<code>&gt;</code>演算子を使うわけではない）</li>\n  <li><code>&lt;</code>演算子の代わりに比較関数を指定できる．\n    <ul>\n      <li>比較関数は<code>cmp(new_element, best_element)</code>という形式で使われる</li>\n      <li>⇒内容によって意図的に弾きたい場合は，第一引数の内容を参照して弾けば良い（min_elementならfalse,max_elementならtrueを返せば弾ける）</li>\n    </ul>\n  </li>\n  <li>実行ポリシーを設定できるらしい（知らんかった)．指定箇所は探索範囲の前．\n    <ul>\n      <li>詳しくは<a href=\"https://ja.cppreference.com/w/cpp/algorithm/execution_policy_tag_t\">実行ポリシー</a>参照とのこと</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"実行ポリシーc17\"><a href=\"https://ja.cppreference.com/w/cpp/algorithm/execution_policy_tag_t\">実行ポリシー(C++17)</a></h3>\n\n<p>stlにはたくさんのアルゴリズム関数が存在するが，それらの第一引数にアルゴリズムの処理を実行する上での制約を「実行ポリシー」として与えることができるらしい．\n「実行ポリシー」は以下のような種類が存在する</p>\n\n<table class=\"-shortcuts\">\n  <thead>\n    <tr>\n      <th>実行ポリシー</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>seq</code></td>\n      <td>順番に処理を実行する必要がある．当然並列化も出来ない</td>\n    </tr>\n    <tr>\n      <td><code>par</code></td>\n      <td>マルチスレッド化による並列化を許可する</td>\n    </tr>\n    <tr>\n      <td><code>par_unseq</code></td>\n      <td>マルチスレッド化・ベクトル化を許可する</td>\n    </tr>\n    <tr>\n      <td><code>unseq</code></td>\n      <td>ベクトル化を許可する（C++20）</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>今までのアルゴリズム関数は<code>seq</code>で実行されるのが当然だった．\nプログラマにから与えられた関数オブジェクトの処理はどういう処理なのかをアルゴリズム関数は知らないのだからそりゃそうだ．\nでも，そのプログラマが処理についてアルゴリズム関数にヒントを与えられるのがこの機能というわけだ．\nもしかしなくても「OpenMPを使ったfor文の並列化は簡単でいいなぁ」と言っていた時代は終わったのかもしれない</p>\n\n<pre><code class=\"language-cpp\">std::for_each(std::execution::par, a.begin(), b.end(), [&amp;](int x) {\n    std::cout &lt;&lt; x &lt;&lt; std::endl;\n});\n</code></pre>\n\n<h3 id=\"stdminmax_element\"><a href=\"https://ja.cppreference.com/w/cpp/algorithm/minmax_element\">std::minmax_element</a></h3>\n\n<ul>\n  <li>コンテナの範囲を渡すと，最大値と最小値をペアにして返してくれる</li>\n  <li>例によって二項比較関数は<code>&lt;</code>演算子相当のものを定義して渡せば良い</li>\n  <li>C++17からは実行ポリシーも指定可能</li>\n  <li><code>std::make_pair(std::min_element(), std::max_element())</code>よりも効率が良い</li>\n  <li>一番大きい/小さい要素が複数ある場合，↑は最初の要素を返し，本アルゴリズムは最後の要素を返す</li>\n</ul>\n\n<pre><code class=\"language-cpp\">const auto [min, max] = std::minmax_element(begin(v), end(v));\n</code></pre>\n\n<h3 id=\"stdenable_shared_from_this\"><a href=\"https://ja.cppreference.com/w/cpp/memory/enable_shared_from_this\">std::enable_shared_from_this</a></h3>\n\n<p>クラス内で<code>this</code>を<code>shared_ptr</code>にしたい場合が往々にしてある．（全て自分のコードの場合では設計が悪い場合が多いが，外部ライブラリを使用しているとそうするしか無い場合もありがち）\nそういう時に，<code>std::shared_ptr&lt;T&gt;(this)</code>などとやってしまうと，<code>this</code>は2回以上破棄されてしまいやすい．</p>\n\n<p>そんな時に使うのが，これ<code>std::enable_shared_from_this</code>. 使い方は<code>shared_ptr</code>化したいクラスで<code>std::enable_shared_from_this</code>をpublic継承し，<code>shared_from_this()</code>を呼ぶだけ．\nしかし，<strong>本機能を使っているクラスは必ずshared_ptrで管理されている必要がある</strong>ので注意が必要．そうでない場合の動作は未定義．</p>\n\n<pre><code class=\"language-cpp\">class A : public std::enable_shared_from_this {\nA(){\n  auto shared_ptr_this = shared_from_this();\n}\n};\n</code></pre>\n\n<h3 id=\"stdfuture\"><a href=\"https://ja.cppreference.com/w/cpp/thread/future\">std::future</a></h3>\n\n<p>非同期処理を行うためのクラス．このクラスでは今は無いが，「未来」に手に入るであろうデータを取り扱う．<br />\nデータが手に入ったかどうかは，<code>valid</code>関数で調べることができ，<code>get</code>関数で取り出せる．<br />\nまた，手に入るまで待機する<code>wait</code>関数も何種類か用意されている．</p>\n\n<table class=\"-shortcuts\">\n  <thead>\n    <tr>\n      <th>関数名</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>wait</code></td>\n      <td>処理完了まで待つ</td>\n    </tr>\n    <tr>\n      <td><code>wait_for(&lt;duration&gt;)</code></td>\n      <td>処理完了まで待つ（指定時間でタイムアウト）</td>\n    </tr>\n    <tr>\n      <td><code>wait_until(&lt;time_point&gt;)</code></td>\n      <td>処理完了まで待つ（指定時間になったらタイムアウト）</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"stdpromise\"><a href=\"https://cpprefjp.github.io/reference/future/promise.html\">std::promise</a></h3>\n\n<p><code>std::future</code>に出来上がったデータを受け渡す役割を持ったクラス<br />\n使い方は以下のような感じ</p>\n<pre><code class=\"language-cpp\">std::promise&lt;int&gt; p;\nstd::future&lt;int&gt; f = p.get_future();\n\np.set_value(1);\n\nstd::cout &lt;&lt; f.get() &lt;&lt; std::endl;\n</code></pre>\n\n<p><code>std::primise</code>は，データを渡す相手に「今はまだ空だけど，将来ここにデータを送るからね」と言って<code>std::future</code>を渡す．<br />\n後日，データを見つけたstd::promise<code>は</code>set_value<code>関数でデータを送り，</code>std::future<code>側では</code>get`関数で受けとれる．</p>\n\n<h3 id=\"委譲コンストラクタc11\"><a href=\"https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html\">委譲コンストラクタ(C++11)</a></h3>\n\n<p>C++11からの機能．複数のコンストラクタ内で共通の処理を初期化処理で行える．<br />\n（コンストラクタの本体にメンバ関数を呼び出す方法もあるが，メンバ関数は初期化が完了した後にしか呼び出せない共通処理なので，ベタ書きしたり委譲コンストラクタを使う場合に比べてパフォーマンスで劣る）</p>\n<pre><code class=\"language-cpp\">class X {\npublic:\n  X(int i) { std::cout &lt;&lt; i &lt;&lt; std::endl; }\n  X() : X(42) {}\n};\n</code></pre>\n\n<h3 id=\"初期化子リストc11\"><a href=\"https://cpprefjp.github.io/lang/cpp11/initializer_lists.html\">初期化子リスト(C++11)</a></h3>\n\n<p>以下のような，波括弧による初期化を可能とする’</p>\n\n<pre><code class=\"language-cpp\">std::vector&lt;int&gt; v1 = {1, 2, 3};\nstd::vector&lt;int&gt; v2 {1, 2, 3};\n</code></pre>\n\n<p>初期化子リストを使うには，<code>std::initilizer_list</code>を引数とするコンストラクタが必要’</p>\n\n<pre><code class=\"language-cpp\">class MyVector {\n  std::vector&lt;int&gt; data_;\npublic:\n  MyVector(std::initializer_list&lt;int&gt; init)\n    : data_(init.begin(), init.end()) {}};\n</code></pre>\n\n<h3 id=\"一様初期化c11\"><a href=\"https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html\">一様初期化(C++11)</a></h3>\n\n<p><code>std::initilizer_list</code>以外のコンストラクタも波括弧を使った初期化ができる機能<br />\n情報が足りていなかったりすると，<code>std::initializer_list</code>型として推論されてしまったりするので注意．</p>\n\n<pre><code class=\"language-cpp\">struct X {\n  X(int, double, std::string) {}\n};\nX createX(){return {1, 3.14, \"hello\"}; }\n</code></pre>\n\n<p><code>std::initializer_list</code>のコンストラクタとそれ以外のコンストラクタの両方で受け取れるような波括弧リストを渡す時，前者が呼び出される．<br />\n但し，空の初期化子リストを渡す場合はデフォルトコンストラクタが優先される．</p>\n\n<h3 id=\"インライン名前空間c11\"><a href=\"https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html\">インライン名前空間(C++11)</a></h3>\n\n<pre><code class=\"language-cpp\">inline namespace my_namespace{}\n</code></pre>\n\n<p>省略可能な名前空間を定義できる．<br />\n上位の名前空間を<code>using</code>するだけで下位のinline名前空間の機能が使えるようになるので，本来なら複数の<code>using</code>文が必要な場合も，１つで事足りる．</p>\n\n<p>以下のように，複数バージョンの関数がそれぞれのバージョンの名前空間にある時，1つだけ<code>inline</code>名前空間で定義することでデフォルトのバージョンを表現することが出来る．<br />\nまた，デフォルトバージョンを変更する場合も<code>inline</code>名前空間を切り替えるだけで実現できる．</p>\n\n<pre><code class=\"language-cpp\">namespace api {\n  inline namespace v1 {\n    void f(){}\n  }\n  namespace v2 {\n    void f(){}\n  }\n}\n</code></pre>\n\n<h3 id=\"入れ子名前空間の定義c17\"><a href=\"https://cpprefjp.github.io/lang/cpp17/nested_namespace.html\">入れ子名前空間の定義(C++17)</a></h3>\n\n<p>入れ子上になった名前空間を一度に定義することが可能になる</p>\n\n<p>C++14まで</p>\n<pre><code class=\"language-cpp\">namespace aa{\n  namespace bb{\n    void f(){}\n  }\n}\n</code></pre>\n\n<p>C++17から</p>\n<pre><code class=\"language-cpp\">namespace aa::bb{\n  void f(){}\n}\n</code></pre>\n\n<h3 id=\"入れ子名前空間でのインライン名前空間c20\"><a href=\"https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.html\">入れ子名前空間でのインライン名前空間(C++20)</a></h3>\n\n<p>C++11からのインライン名前空間とC++17からの入れ子名前空間の併用は出来なかったが，C++20から出来るようになった</p>\n\n<p>C++17</p>\n<pre><code class=\"language-cpp\">namespace aa{\n  inline namespace bb{\n    void f(){}\n  }\n}\n</code></pre>\n<p>C++20</p>\n<pre><code class=\"language-cpp\">namespace aa::inline bb{\n  void f(){}\n}\n</code></pre>\n\n<h3 id=\"範囲for文c11\"><a href=\"https://cpprefjp.github.io/lang/cpp11/range_based_for.html\">範囲for文(C++11)</a></h3>\n\n<p>for文を簡潔に書くことが出来る機能．</p>\n<pre><code class=\"language-cpp\">for ( auto element : elements ) std::cout &lt;&lt; element &lt;&lt; std::endl;\n</code></pre>\n\n<p>↑は↓のように展開される（C++17以降や，配列を扱う時は展開され方が異なる）</p>\n\n<pre><code class=\"language-cpp\">auto &amp;&amp; __range = elements;\nfor (auto __begin = __range.begin(), __end = __range.end(); __begin != __end; ++__begin) {\n  auto element = *__begin;\n  std::cout &lt;&lt; element &lt;&lt; std::endl;\n}\n</code></pre>\n<p>↑から分かるように，<code>begin()</code>,<code>end()</code>,<code>operator++()</code>, <code>operator*()</code>, <code>operator!=()</code>が適切に定義されていれば自作クラスでも使える．</p>\n\n<p>注意点</p>\n<ul>\n  <li>要素をeraseしてはいけない(バグる)</li>\n  <li>インデックスの取得とは相性が悪い（出来ないこともない：<a href=\"https://hansrobo.github.io/mycheatsheets/range-based-for#:~:text=%E7%AF%84%E5%9B%B2for%E6%96%87(range%2Dbased%20for)%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84\">別ページ</a>参照）</li>\n  <li>範囲として渡した配列などが，範囲for文実行中に寿命が切れないように注意</li>\n</ul>\n\n<h3 id=\"範囲forループの制限緩和c17\"><a href=\"https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html\">範囲forループの制限緩和(C++17)</a></h3>\n\n<p>範囲for文を適用するコンテナの<code>begin()</code>関数と<code>end()</code>関数の戻り値の型が一致していなくても良くなった．<br />\n正直使う機会は少ないが，番兵法アルゴリズムを使いたいときなどは便利に使えるらしい．<br />\n使いたいから緩和したというより，制限する意味がなかったから緩和したという方が正しそう？</p>\n\n<h3 id=\"範囲for文がカスタマイゼーションポイントを見つけるルールを緩和\"><a href=\"https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html\">範囲for文がカスタマイゼーションポイントを見つけるルールを緩和</a></h3>\n\n<p>範囲for文を展開する時に<code>begin()</code>と<code>end()</code>を探すルールが変更された．（C++11まで遡って変更されていて，<a href=\"https://cpprefjp.github.io/implementation-status.html#:~:text=%E3%81%97%E3%81%AB%E3%81%84%E3%81%8F-,8,8,-2019%20Update%205\">gcc8,clang8以降で適用されている</a>）</p>\n\n<p>適用前イメージ</p>\n<pre><code class=\"language-cpp\">if ( beginメンバ関数が存在 OR endメンバ関数が存在 ){\n  beginメンバ関数を使用\n}else{\n  非メンバbegin/end関数を探す&amp;使う\n}\n</code></pre>\n\n<p>適用後イメージ</p>\n<pre><code class=\"language-cpp\">if ( beginメンバ関数が存在 AND endメンバ関数が存在 ){\n  begin/endメンバ関数を使用\n}else{\n  非メンバbegin/end関数を探す&amp;使う\n}\n</code></pre>\n\n<p><a href=\"https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html\">cppref.jpのページ</a>のサンプルコードは説明が少なくてわかりにくいので，以下解説</p>\n\n<ul>\n  <li>そもそも<code>std_stringstream</code>には<code>begin()</code>と<code>end()</code>が存在しない</li>\n  <li>しかし，<code>std_stringstream</code>が継承している<code>std::ios_base</code>には<a href=\"https://cpprefjp.github.io/reference/ios/ios_base/type-seekdir.html#:~:text=current%20%E3%81%AE%E7%95%A5%EF%BC%89-,end,-%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%81%AE%E7%8F%BE%E5%9C%A8\"><code>std::ios_base::end</code></a>(関数ではない)が存在する</li>\n  <li><code>std::ios_base::end</code>が範囲for文に必要な<code>end</code>として認識される</li>\n  <li>適用前のルールだと，<code>begin</code>の存在を確認することなくメンバ関数で範囲forの展開をしてしまう</li>\n  <li>適用後のルールでは，<code>begin</code>の存在も確認を行うため，<code>std::ios_base::end</code>は範囲forの展開に使われない</li>\n  <li>適用後のルールでは結局非メンバの<code>begin</code>と<code>end</code>が使われて問題なくコンパイルできる</li>\n</ul>\n\n<h3 id=\"属性構文c11\"><a href=\"https://cpprefjp.github.io/lang/cpp11/attributes.html\">属性構文(C++11)</a></h3>\n\n<p>ソースコードに関する追加の情報をコンパイラに伝えるための構文<br />\n主に，コンパイラの最適化のためと警告抑制のために使われる印象<br />\n型などとは違い，ユーザが属性を定義することは出来ない．</p>\n\n<p>現在存在するのは以下</p>\n<ul>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp11/attributes.html#noreturn\">noreturn(C++11)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp11/attributes.html#carries_dependency\">carries_dependency(C++11)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html\">deprecated(C++14)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp17/maybe_unused.html\">maybe_unused(C++17)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp17/nodiscard.html\">nodicard(C++17)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp17/fallthrough.html\">fallthrough(c++17)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html\">no_unique_adress(c++20)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html\">likely, unlikely (c++20)</a></li>\n</ul>\n\n<h3 id=\"noreturn属性c11\"><a href=\"https://cpprefjp.github.io/lang/cpp11/attributes.html#noreturn\">[[noreturn]]属性(C++11)</a></h3>\n\n<p>⇒警告抑制タイプの属性：「関数が返らないパスが存在する」という警告を抑制<br />\n⇒最適化促進タイプの属性：制約を増して最適化に寄与</p>\n\n<pre><code class=\"language-cpp\">[[noreturn]] void report_error(){\n  throw std::runtime_error(\"error\");\n}\n</code></pre>\n<p>関数が決して返らない（=必ず例外が投げられる？）ことをコンパイラに伝える<br />\nこの属性がついた関数が返る場合の動作は未定義</p>\n\n<h3 id=\"carries_dependency属性c11\"><a href=\"https://cpprefjp.github.io/lang/cpp11/attributes.html#carries_dependency\">[[carries_dependency]]属性(C++11)</a></h3>\n\n<p>TBD</p>\n\n<p>TODO:</p>\n<ul>\n  <li><a href=\"https://cpprefjp.github.io/reference/atomic/atomic.html\">std::atomic</a></li>\n  <li><a href=\"https://cpprefjp.github.io/reference/atomic/memory_order.html\">std::memory_order</a></li>\n</ul>\n\n<h3 id=\"deprecatedc14\"><a href=\"https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html\">deprecated(C++14)</a></h3>\n<pre><code class=\"language-cpp\">[[deprecated(\"please use new_func() function\")]] void old_func() {}\n</code></pre>\n<p>非推奨であることを示す属性．使うとコンパイル時に警告を発する<br />\n警告で出すメッセージも指定できるので，代わりに使って欲しい機能を示すとより親切<br />\nこの属性が使える場所は以下の通り</p>\n<ul>\n  <li>クラス</li>\n  <li>型の別名</li>\n  <li>変数</li>\n  <li>非静的メンバ変数</li>\n  <li>関数</li>\n  <li>列挙型</li>\n  <li>テンプレートの特殊化</li>\n</ul>\n\n<h3 id=\"maybe_unusedc17\"><a href=\"https://cpprefjp.github.io/lang/cpp17/maybe_unused.html\">maybe_unused(C++17)</a></h3>\n\n<p>⇒警告抑制タイプの属性：意図して使ってない要素に対してコンパイラに文句を言わせない</p>\n\n<p>主に，各種宣言部分で色々使える</p>\n<pre><code class=\"language-cpp\">class [[maybe_unused]] X;\nusing integer [[maybe_unused]] = int;\n[[maybe_unused]] typedef int integer;\n[[maybe_unused]] void f();\ntemplate &lt;class T&gt;\n[[maybe_unused]] inline void f();\nenum class [[maybe_unused]] E {\n  A [[maybe_unused]],\n  B\n};\n</code></pre>\n\n<p>関数の引数の場合，maybe_unusedを指定せずとも，引数名を定義しないことで警告を抑制できる．</p>\n<pre><code class=\"language-cpp\">void func1([[maybe_unused]]int unused_arg){}\nvoid func2(int){}\n</code></pre>\n<h3 id=\"coming-soon\">Coming Soon</h3>\n<ul>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp11/attributes.html\">属性構文(C++11)</a>\n    <ul>\n      <li><a href=\"https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html\">deprecated(C++14)</a></li>\n      <li><a href=\"https://cpprefjp.github.io/lang/cpp17/maybe_unused.html\">maybe_unused(C++17)</a></li>\n      <li><a href=\"https://cpprefjp.github.io/lang/cpp17/nodiscard.html\">nodicard(C++17)</a></li>\n      <li><a href=\"https://cpprefjp.github.io/lang/cpp17/fallthrough.html\">fallthrough(c++17)</a></li>\n      <li><a href=\"https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html\">no_unique_adress(c++20)</a></li>\n      <li><a href=\"https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html\">likely, unlikely (c++20)</a></li>\n      <li><a href=\"https://cpprefjp.github.io/lang/cpp20/reserving_attribute_namespaces_for_future_use.html\">属性の名前空間予約(c++20)</a></li>\n    </ul>\n  </li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html\">不明な属性を無視する(C++17)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html\">スレッドローカルストレージ(C++11)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html\">ブロックスコープを持つstatic変数初期化のスレッドセーフ化(C++11)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp11/extern_template.html\">extern template(C++11)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp11/dependent_name_specifier_outside_of_templates.html\">依存名に対するtypenameとtemplateの制限緩和(C++11)</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp11/variadic_templates.html\">可変引数テンプレート</a></li>\n  <li><a href=\"https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html\">継承コンストラクタ(C++11)</a></li>\n  <li>mutex</li>\n  <li>lock_gard</li>\n</ul>",
  "intro_html": "<p>cppreference.com日記</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "debug_tools",
  "title": "Debug Tools",
  "url": "/debug_tools",
  "category": "Ubuntu",
  "keywords": null,
  "content_html": "<h3 id=\"ldd\">ldd</h3>\n\n<p>共有ライブラリへの依存関係を表示する</p>\n\n<pre><code class=\"language-bash\">ldd &lt;options&gt; &lt;executable&gt;\n</code></pre>\n\n<p>出力例</p>\n<pre><code class=\"language-bash\">ldd a.out\n linux-vdso.so.1 =&gt;  (0x00007fff089ff000)\n libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe74edb3000)\n /lib64/ld-linux-x86-64.so.2 (0x00007fe74f145000)\n</code></pre>\n\n<p>よく使うオプション</p>\n\n<table class=\"-shortcuts\">\n  <thead>\n    <tr>\n      <th>オプション</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>-d</code></td>\n      <td>足りないオブジェクトを表示</td>\n    </tr>\n    <tr>\n      <td><code>-r</code></td>\n      <td>足りないオブジェクトと関数を表示</td>\n    </tr>\n    <tr>\n      <td><code>-u</code></td>\n      <td>未使用の依存関係を表示</td>\n    </tr>\n    <tr>\n      <td><code>-v</code></td>\n      <td>全ての情報を表示</td>\n    </tr>\n  </tbody>\n</table>",
  "intro_html": "<p>Debug Tools</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "git",
  "title": "Git",
  "url": "/git",
  "category": "Ubuntu",
  "keywords": null,
  "content_html": "<h3 id=\"gitのsubmoduleの移動方法\">gitのsubmoduleの移動方法</h3>\n\n<pre><code class=\"language-bash\">git mv &lt;from&gt; &lt;to&gt;\n</code></pre>\n\n<h3 id=\"githubにssh鍵を追加する\">GitHubにssh鍵を追加する</h3>\n\n<pre><code class=\"language-bash\">cd ~/.ssh\nssh-keygen -t rsa\n</code></pre>\n\n<ul>\n  <li>名前とパスワードを聞かれるので入力</li>\n  <li>公開鍵（〜.pub）の中身をgithubに登録</li>\n</ul>\n\n<p><a href=\"https://github.com/settings/keys\">https://github.com/settings/keys</a></p>\n\n<ul>\n  <li>configに登録</li>\n</ul>\n\n<pre><code class=\"language-bash\">Host github github.com\n  HostName github.com\n  IdentityFile ~/.ssh/github\n  User git\n</code></pre>\n\n<ul>\n  <li>テスト</li>\n</ul>\n\n<pre><code class=\"language-bash\">ssh -T github\n</code></pre>",
  "intro_html": "<p>Git</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "gnome-extensions",
  "title": "GNOME Extensions",
  "url": "/gnome-extensions",
  "category": "Ubuntu, Tools",
  "keywords": null,
  "content_html": "<h3 id=\"workspace-matrix\">Workspace Matrix</h3>\n\n<p><a href=\"https://extensions.gnome.org/extension/1485/workspace-matrix/\">extensions.gnome.org</a></p>\n\n<p><img src=\"https://extensions.gnome.org/extension-data/screenshots/screenshot_1485.png\" alt=\"screenshot\" /></p>\n\n<h3 id=\"wintile\">WinTile</h3>\n\n<p><a href=\"https://extensions.gnome.org/extension/1723/wintile-windows-10-window-tiling-for-gnome/\">extensions.gnome.org</a></p>\n\n<p><img src=\"https://extensions.gnome.org/extension-data/screenshots/screenshot_1723.png\" alt=\"screenshot\" /></p>\n\n<h3 id=\"gtile\">gTile</h3>\n\n<p><a href=\"https://extensions.gnome.org/extension/28/gtile/\">extensions.gnome.org</a></p>\n\n<p><img src=\"https://extensions.gnome.org/extension-data/screenshots/screenshot_28.png\" alt=\"screenshot\" /></p>\n\n<h3 id=\"github-notifications\">GitHub Notifications</h3>\n\n<p><a href=\"https://extensions.gnome.org/extension/1125/github-notifications/\">extensions.gnome.org</a></p>\n\n<p><img src=\"https://extensions.gnome.org/extension-data/screenshots/screenshot_1125_WJMldKq.png\" alt=\"task-bar\" /></p>\n\n<p><img src=\"https://raw.githubusercontent.com/HansRobo/mycheatsheets/master/assets/images/github-notifications-settings.png\" alt=\"setting\" /></p>\n\n<h3 id=\"cpufreq\">CPUFreq</h3>\n\n<p><a href=\"https://extensions.gnome.org/extension/1082/cpufreq/\">extensions.gnome.org</a><br />\nUbuntu22.04では動かないかも</p>\n\n<p><img src=\"https://extensions.gnome.org/extension-data/screenshots/screenshot_1082_8G7gjUt.png\" alt=\"panel\" /></p>\n\n<h3 id=\"spotify-tray\">Spotify-Tray</h3>\n\n<p><a href=\"https://extensions.gnome.org/extension/4472/spotify-tray/\">extensions.gnome.org</a></p>\n\n<p><img src=\"https://extensions.gnome.org/extension-data/screenshots/screenshot_4472.png\" alt=\"screenshot\" /></p>",
  "intro_html": "<p>GNOME Extensions</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-08-07"
},{
  "id": "kde",
  "title": "KDE",
  "url": "/kde",
  "category": "Ubuntu",
  "keywords": null,
  "content_html": "<h3 id=\"kdeの残骸を消す\">KDEの残骸を消す</h3>\n\n<pre><code class=\"language-bash\">sudo apt remove plasma-desktop --autoremove\nsudo apt-get remove kde* --autoremove\nsudo apt-get remove plasma* --autoremove\nsudo update-alternatives --config default.plymouth\nsudo update-initramfs -u\nsudo update-grub\nsudo systemctl disable sddm\nsudo systemctl stop sddm\nsudo apt-get purge --auto-remove sddm\nsudo systemctl enable gdm3\nsudo systemctl start gdm3\nreboot\n</code></pre>\n\n<p><a href=\"https://trendoceans.com/how-to-remove-the-kde-plasma-environment-in-ubuntu/\">参考</a></p>\n\n<h3 id=\"kdeのwalletの無効化\">KDEのWalletの無効化</h3>\n\n<p>KDE付属のパスワード管理ソフト「kwallet」</p>\n\n<p>~/.config/kwalletrcに</p>\n\n<pre><code class=\"language-jsx\">Enabled=false\n</code></pre>\n\n<p>と書き込む</p>\n\n<p>（有効化はログアウトかプラズマの再起動が必要）</p>\n\n<p>参考：</p>\n\n<p><a href=\"https://www.webdevqa.jp.net/ja/kde5/kde%E3%82%A6%E3%82%A9%E3%83%AC%E3%83%83%E3%83%88%E3%82%92%E7%84%A1%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%AF%EF%BC%9F/957133052/\">KDEウォレットを無効にする方法は？</a></p>",
  "intro_html": "<p>KDE</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "media_operation",
  "title": "Media Operations",
  "url": "/media_operation",
  "category": "Ubuntu",
  "keywords": null,
  "content_html": "<h3 id=\"動画をgifへ変換する\">動画をgifへ変換する</h3>\n\n<p>共有ライブラリへの依存関係を表示する</p>\n\n<pre><code class=\"language-bash\">ffmpeg -i input.mp4 output.gif\n</code></pre>\n\n<p>よく使うオプション</p>\n\n<table class=\"-shortcuts\">\n  <thead>\n    <tr>\n      <th>オプション</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>-r &lt;rate&gt;</code></td>\n      <td>フレームレートを指定</td>\n    </tr>\n    <tr>\n      <td><code>-vf scale=&lt;width&gt;:-1</code></td>\n      <td>横幅を指定してリサイズ（固定比）</td>\n    </tr>\n    <tr>\n      <td><code>-ss</code></td>\n      <td>開始秒数を指定</td>\n    </tr>\n    <tr>\n      <td><code>-t</code></td>\n      <td>動画秒数を指定</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"画像をpdfファイルにする\">画像をpdfファイルにする</h3>\n\n<p>論文とかで使うかも？</p>\n\n<pre><code class=\"language-bash\">sudo apt install imagemagick\nconvert input.png output.pdf\n</code></pre>\n\n<p>エラーが出る場合，<code>/etc/ImageMagick-6/policy.xml</code>を編集する．</p>\n<pre><code class=\"language-xml\">&lt;policy domain=\"coder\" rights=\"none\" pattern=\"PDF\" /&gt;\n</code></pre>\n<p>を</p>\n<pre><code class=\"language-xml\">&lt;policy domain=\"coder\" rights=\"read|write\" pattern=\"PDF\" /&gt;\n</code></pre>\n<p>に書き換える</p>\n\n<h3 id=\"画像の種類変換\">画像の種類変換</h3>\n<pre><code class=\"language-bash\">sudo apt install imagemagick\nconvert input.png output.jpg\n</code></pre>\n\n<p>以下のような有名フォーマットには軒並み対応している</p>\n<p>\n- bmp\n- eps\n- gif\n- jpeg\n- mat\n- pdf\n- pgm\n- png\n- svg\n- webp\n</p>\n\n<h3 id=\"音声変換\">音声変換</h3>\n\n<pre><code class=\"language-bash\">ffmpeg -i input.wav output.mp3\n</code></pre>\n\n<p>よく使うオプション</p>\n\n<table class=\"-shortcuts\">\n  <thead>\n    <tr>\n      <th>オプション</th>\n      <th>説明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>-ar &lt;rate&gt;</code></td>\n      <td>サンプリングレートを指定（省略で入力ファイルと同じに）</td>\n    </tr>\n    <tr>\n      <td><code>-f &lt;format&gt;</code></td>\n      <td>出力フォーマットを指定</td>\n    </tr>\n    <tr>\n      <td><code>-vn</code></td>\n      <td>動画ファイルの場合，音声部分のみ取り出す</td>\n    </tr>\n  </tbody>\n</table>",
  "intro_html": "<p>Media Operations</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "package",
  "title": "package.json",
  "url": "/package",
  "category": "Hidden",
  "keywords": null,
  "content_html": "",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "range-based-for",
  "title": "範囲for文",
  "url": "/range-based-for",
  "category": "C++",
  "keywords": null,
  "content_html": "<h3 id=\"範囲for文range-based-forでインデックスを使いたい\">範囲for文(range-based for)でインデックスを使いたい</h3>\n\n<p><code>boost::adaptors::indexed</code>を使う</p>\n<pre><code class=\"language-c++\">#include &lt;boost/range/adaptor/indexed.hpp&gt;\nfor (const auto &amp; e : elements | boost::adaptors::indexed()) {\n    std::cout &lt;&lt; e.index() &lt;&lt; \":\" &lt;&lt; e.value() &lt;&lt; std::endl;\n}\n</code></pre>\n\n<p><a href=\"https://github.com/ericniebler/range-v3\">range-v3</a>ライブラリを使う</p>\n<pre><code class=\"language-c++\">#include &lt;range/v3/view/enumerate.hpp&gt;\nfor (const auto &amp; [index, value] : elements | ranges::views::enumerate) {\n    std::cout &lt;&lt; index &lt;&lt; \":\" &lt;&lt; value &lt;&lt; std::endl;\n}\n</code></pre>\n\n<p>C++20以降で書ける方法</p>\n<pre><code class=\"language-cpp\">for (size_t index = 0; const auto &amp; e: elemnets) {\n    std::cout &lt;&lt; index &lt;&lt; \":\" &lt;&lt; value &lt;&lt; std::endl;\n    ++index;\n}\n</code></pre>\n<h3 id=\"範囲for文の型の使い方\">範囲for文の型の使い方</h3>\n<p>基本的にはユニバーサル参照 <code>auto &amp;&amp;</code> を使う</p>\n<pre><code class=\"language-cpp\">for(auto &amp;&amp; e : elements){}\n</code></pre>\n\n<p>配列に操作を加えない時はconst参照 <code>const auto  &amp;</code> を使う</p>\n<pre><code class=\"language-cpp\">for(const auto &amp; e : elements){}\n</code></pre>",
  "intro_html": "<p>範囲for文の使い方</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "ros_packages",
  "title": "ROS Packages",
  "url": "/ros_packages",
  "category": "ROS",
  "keywords": null,
  "content_html": "<h3 id=\"ros2_logging_fmt\">ros2_logging_fmt</h3>\n\n<p><a href=\"https://github.com/facontidavide/ros2_logging_fmt\">facontidavide/ros2_logging_fmt</a></p>\n\n<p>fmtlibを使ってログを出力する軽量かつシンプルなロギングツール</p>\n\n<pre><code class=\"language-c++\">ros2_logging_fmt::Logger logger(node.get_logger());\n\nlogger.info(\"Hello {} number {}\", world, 42);\nlogger.error(\"We have {} errors\", 99);\nlogger.warn(\"Warning: {} &gt; {}\", 30.1, 30.0);\nlogger.debug(\"DEBUG MESSAGE\");\n</code></pre>\n\n<h3 id=\"grid_map\">grid_map</h3>\n\n<p>グリッドマップを扱う強力なライブラリ<br />\n<a href=\"https://github.com/ANYbotics/grid_map\">ANYbotics/grid_map</a></p>\n\n<p>ROS2対応はゆっくりなので，TIERIVフォークの方が良い<br />\n<a href=\"https://github.com/tier4/grid_map/tree/prepare/humble\">tier4/grid_map/tree/prepare/humble</a></p>\n\n<h3 id=\"generate_parameter_library\">generate_parameter_library</h3>\n\n<p>ROS2のパラメータをライブラリに固めて配布したり出来るライブラリ</p>\n\n<p><a href=\"https://github.com/PickNikRobotics/generate_parameter_library\">PickNikRobotics/generate_parameter_library</a></p>",
  "intro_html": "<p>ros_packages</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-08-03"
},{
  "id": "ros_tools",
  "title": "ROS Tools",
  "url": "/ros_tools",
  "category": "ROS",
  "keywords": null,
  "content_html": "<style type=\"text/css\">\nvideo {\n    width: 100%;\n}\n</style>\n\n<h3 class=\"-three-column\" id=\"plotjuggler\">PlotJuggler</h3>\n\n<p>強力なプロットツール</p>\n\n<pre><code class=\"language-bash\">sudo apt install ros-$ROS_DISTRO-plotjuggler\n</code></pre>\n\n<p><a href=\"https://github.com/facontidavide/PlotJuggler\">facontidavide/PlotJuggler</a></p>\n\n<p><img src=\"https://raw.githubusercontent.com/facontidavide/PlotJuggler/main/docs/plotjuggler3.gif\" alt=\"PlotJuggler\" /></p>\n\n<h3 id=\"multi_data_monitor\">multi_data_monitor</h3>\n\n<p>Rviz2の上の部分にデータを表示するRviz2プラグイン</p>\n\n<p><a href=\"https://github.com/tier4/multi_data_monitor\">tier4/multi_data_monitor</a></p>\n\n<h3 id=\"rqt_embed_window\">rqt_embed_window</h3>\n\n<p>任意のウインドウをrqtで表示するプラグイン</p>\n\n<p><a href=\"https://github.com/awesomebytes/rqt_embed_window\">awesomebytes/rqt_embed_window</a></p>\n\n<p><img src=\"https://raw.githubusercontent.com/awesomebytes/rqt_embed_window/main/screenshot1.png\" alt=\"Screenshot of SimpleScreenRecorder, Rviz, Plotjuggler, rosbag_editor and a normal rqt_console\" /></p>\n\n<h3 id=\"dear_ros_node_viewer\">dear_ros_node_viewer</h3>\n\n<p>DearImGuiライブラリを使ったrqt_graphの軽量版<br />\n<a href=\"https://github.com/takeshi-iwanari/dear_ros_node_viewer\">takeshi-iwanari/dear_ros_node_viewer</a></p>\n\n<video controls=\"\" autoplay=\"\" muted=\"\">\n  <source src=\"https://user-images.githubusercontent.com/105265012/177068238-eaf4fed9-12c0-4c5b-ac7f-9597483c4c3c.mp4\" type=\"video/mp4\" />\n</video>\n\n<p><img src=\"https://user-images.githubusercontent.com/105265012/177068238-eaf4fed9-12c0-4c5b-ac7f-9597483c4c3c.mp4\" alt=\"\" /></p>\n\n<h3 id=\"ament_cmake_auto\">ament_cmake_auto</h3>\n\n<p>ROS2のCMakeを楽に書くためのプラグイン<br />\nデフォルトでインストールされている<br />\n詳細は<a href=\"https://hans-robo.hatenablog.com/entry/2020/12/15/153503\">ブログ</a>を参照</p>\n\n<p><a href=\"https://github.com/ament/ament_cmake/tree/rolling/ament_cmake_auto\">amnet_cmake_auto</a></p>\n\n<pre><code class=\"language-CMake\">cmake_minimum_required(VERSION 3.5)\nproject(example)\n\nfind_package(ament_cmake_auto REQUIRED)\nament_auto_find_build_dependencies()\n\nament_auto_add_library(${PROJECT_NAME} SHARED\n src/example.cpp include/example.hpp)\n\nif(BUILD_TESTING)\n  find_package(ament_lint_auto REQUIRED)\n  ament_lint_auto_find_test_dependencies()\nendif()\n\nament_auto_package()\n</code></pre>\n\n<h3 id=\"ros_system_fingerprint\">ros_system_fingerprint</h3>\n\n<p>ROSのためのシステム状態を一括で出力するコマンド</p>\n\n<pre><code class=\"language-bash\">ros2 run system_fingerprint imprint\n</code></pre>\n\n<p><a href=\"https://github.com/MetroRobots/ros_system_fingerprint/tree/ros2\">MetroRobots/ros_system_fingerprint</a></p>\n\n<p>以下のものが出力に含まれる</p>\n\n<ul>\n  <li>システム情報（カーネルバージョンなど）</li>\n  <li>環境変数</li>\n  <li>起動しているノード情報</li>\n  <li>パラメータ情報</li>\n  <li>サービス・アクション・トピック情報</li>\n  <li>ROSワークスペース情報</li>\n</ul>\n\n<p>出力例は<a href=\"https://github.com/MetroRobots/ros_system_fingerprint/blob/ros2/example_fingerprint.yaml\">こちら</a></p>",
  "intro_html": "<p>ros_tools</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-08-03"
},{
  "id": "ubuntu",
  "title": "ubuntu",
  "url": "/ubuntu",
  "category": "Ubuntu",
  "keywords": null,
  "content_html": "<h3 id=\"capslockキーをmenuキーにする\">CapsLockキーをMenuキーにする</h3>\n\n<p><code>/etc/default/keyboard</code>を編集して以下の一行を追加する</p>\n\n<pre><code class=\"language-/etc/default/keyboard\">XKBOPTIONS=\"menu:nocaps\"`\n</code></pre>\n\n<p>編集が終了したら再起動</p>\n\n<h3 id=\"フォルダを英語化する\">フォルダを英語化する</h3>\n\n<p>以下を実行</p>\n\n<pre><code class=\"language-bash\">LANG=C xdg-user-dirs-gtk-update\n</code></pre>\n\n<h3 id=\"aptのupgrade系コマンドの違い\">aptのupgrade系コマンドの違い</h3>\n\n<p>aptのサブコマンドで似たような以下の3つのコマンドがある</p>\n\n<ul>\n  <li>upgrade</li>\n  <li>dist-upgrade</li>\n  <li>full-upgrade</li>\n</ul>\n\n<h4 id=\"sudo-apt-upgrade\">sudo apt upgrade</h4>\n\n<p>sources.listで設定されたPPAなどの取得元から利用可能なアップグレードをインストールする．</p>\n\n<p>アップグレードするパッケージに新たな依存関係が追加された場合，新しい依存パッケージが追加でインストールされるが，\n<strong>アップグレードの過程で何らかのパッケージの削除が必要となる場合，アップグレードは行われない</strong></p>\n\n<h4 id=\"sudo-apt-get-dist-upgrade--full-upgrade\">sudo apt-get dist-upgrade / full-upgrade</h4>\n\n<p><strong>dist-upgradeとfull-upgradeは同様の機能</strong></p>\n\n<p>dist-upgradeはapt-getとの互換性の為に残されている気がする．</p>\n\n<p><strong>upgradeとは違い，システム全体をアップグレードするためなら既存パッケージの削除を厭わない．</strong></p>\n\n<h3 id=\"discordを最小化状態で起動するubuntu\">Discordを最小化状態で起動する(Ubuntu)</h3>\n\n<pre><code class=\"language-bash\">discord --start-minimized\n</code></pre>\n\n<p><a href=\"https://support.discord.com/hc/en-us/community/posts/360048037971-Option-for-Discord-to-start-minimized-on-Linux\">Option for Discord to start minimized on Linux</a></p>\n\n<h3 id=\"slackを最小化した状態で立ち上げる\">Slackを最小化した状態で立ち上げる</h3>\n\n<p>-uオプションをつける</p>\n\n<pre><code class=\"language-bash\">slack -u\n</code></pre>\n\n<h3 id=\"シンボリックリンクコマンドの覚え方\">シンボリックリンクコマンドの覚え方</h3>\n\n<p>なぜか，覚えられない<code>ln -s</code><br />\n実は<code>cp</code>や<code>mv</code>コマンドとリンク元と登録名の並びが一緒！</p>\n\n<pre><code class=\"language-bash\"> ln -s リンク元 登録名\n</code></pre>\n\n<h3 id=\"xml---yamlの変換\">XML -&gt; YAMLの変換</h3>\n\n<pre><code class=\"language-bash\">sudo apt install libxml-compile-perl libconfig-yaml-perl\nxml2yaml -x xml.xml -s schema.xsd yaml.yaml\n</code></pre>\n\n<h3 id=\"キャッシュクリア色々\">キャッシュクリア色々</h3>\n\n<h4 id=\"apt\">apt</h4>\n\n<pre><code class=\"language-bash\">sudo apt clean\nsudo apt --fix-broken install\n</code></pre>\n<h4 id=\"pip\">pip</h4>\n\n<pre><code class=\"language-bash\">rm -rf ~/.cache/pip\n</code></pre>",
  "intro_html": "<p>Ubuntu</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-06-16"
},{
  "id": "vscode-extensions",
  "title": "VSCode 拡張機能",
  "url": "/vscode-extensions",
  "category": "Tools",
  "keywords": null,
  "content_html": "<h3 id=\"errorlens\"><a href=\"https://marketplace.visualstudio.com/items?itemName=PhilHindle.errorlens\">ErrorLens</a></h3>\n\n<p>出てきたエラーをその行に表示してくれる．エラーなら赤，警告なら黄色に着色してくれるのでこれで警告を放っておくことも減りそう</p>\n\n<p><img src=\"https://github.com/phindle/error-lens/raw/master/images/Screenshot-1.png\" alt=\"\" /></p>\n\n<h3 id=\"docker\">Docker</h3>\n\n<p>TBD</p>\n\n<h3 id=\"テキスト校正くん\">テキスト校正くん</h3>\n\n<p>TBD</p>\n\n<h3 id=\"3d-viewer-for-vscode\">3D Viewer for VSCode</h3>\n\n<p>TBD</p>\n\n<h3 id=\"brancket-lens\">Brancket Lens</h3>\n\n<p>TBD</p>",
  "intro_html": "<p>VSCode 拡張機能</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2022-08-30"
},{
  "id": "assets/css/style.css",
  "title": null,
  "url": "/assets/css/style.css",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>@import “jekyll-theme-primer”;</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "redirects.json",
  "title": null,
  "url": "/redirects.json",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>{“/package.html”:”https://hansrobo.github.io/mycheatsheets/package.json”}</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
}
]

